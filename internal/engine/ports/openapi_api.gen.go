// Package ports provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package ports

import (
	"context"
	"net/http"

	"github.com/go-chi/chi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /hashtag/sync)
	SyncHashtag(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SyncHashtag operation middleware
func (siw *ServerInterfaceWrapper) SyncHashtag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, "bearerAuth.Scopes", []string{""})

	siw.Handler.SyncHashtag(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Get("/hashtag/sync", wrapper.SyncHashtag)
	})

	return r
}
